###
# 2020 프로그래밍기초 중간고사
#
# 이름 : 홍영진
# 학번 : 2018072488
#
##################################################################
### 실전코드
##################################################################
#
# A 대학 컴퓨터학과 프로그래밍기초 수업의 성적평가 계산하기
# 
# A 대학 컴퓨터학과의 프로그래밍기초 과목의 성적은 다음과 같은 방식으로 매겨진다.
# 
# 우선 100점 만점을 기준으로 다음과 같은 평가 기준 및 배분 점수를 가진다.
# 
# 출석 10점
# 실습 20점
# 과제 20점
# 시험 50점
# 
# 한 학생의 점수는 학생의 이름, 그리고 위 네 점수를 순서대로 튜플로 표현한다.
# 예를 들어 ("홍길동", 9, 15, 19, 30)은 홍길동 학생의 점수로, 
# 출석 점수는 9점, 실습 점수는 15점, 과제 점수는 19점, 시험 점수는 30점 임을 뜻한다.
# 
# 한 학기동안 수업을 들은 모든 학생은 자료는 위 점수의 리스트로 제공된다.
# 예를 들어 이번 학기에 세 학생 홍길동, 임꺽정, 전우치의 [전체성적자료]는 다음과 같다.
# [("홍길동", 9, 15, 19, 40), ("임꺽정", 3, 3, 3, 33), ("전우치", 6, 14, 13, 40)]
# 
##################################################################
# [5점] 문제 1.
##################################################################
#
# 한 학기의 [전체성적자료]를 입력받아 다음과 같이 각 학생의 점수를 출력하는 함수 print_all 을 작성하시오.
# 
# 입력(인자) : 튜플 (<이름>, <출석>, <실습>, <과제>, <시험>) 의 리스트 
# 출력(리턴값) : 리턴 값 없음
# 위 예시 데이터를 기준으로 다음과 같이 출력되어야 한다.

# 홍길동 - 출석: 9 , 실습: 15 , 과제: 19 , 시험: 40 , 총점은  83 입니다.
# 임꺽정 - 출석: 3 , 실습: 3 , 과제: 3 , 시험: 33 , 총점은  42 입니다.
# 전우치 - 출석: 6 , 실습: 14 , 과제: 13 , 시험: 40 , 총점은  73 입니다.

#

def print_all(all):
  for i in all:
      total = 0
      total = i[1] + i[2] + i[3] + i[4]
      print(i[0] + ' - 출석: ' + str(i[1]) + ' , 실습: ' + str(i[2]) + ' , 과제: ' +  str(i[3]) + ' , 시험: ' + str(i[4]) + ' , 총점은  ' + str(total) + ' 입니다.')


##################################################################
# [5점] 문제 2.
##################################################################
#
# 한 학기의 [전체성적자료]를 입력받아 다음과 같이 출력하는 함수 print_info 를 작성하시오.
# 
# 입력(인자) : 튜플 (<이름>, <출석>, <실습>, <과제>, <시험>) 의 리스트 
# 출력(리턴값) : 리턴 값 없음
# 
# 위 예시 데이터를 기준으로 다음과 같이 출력되어야 한다. 평균 점수는 소수점 둘째 자리에서 반올림한다.
#
# 힌트1 : 최고 점수는 100점 보다 클 수 없고, 최저 점수는 0점 보다 작을 수 없다.
# 힌트2 : return 문을 사용하면 함수를 바로 종료할 수 있다.

# 이번학기 수강 인원은 3 명입니다.
# 최고 점수는 83 점, 최저 점수는 42 점, 평균 점수는 66.0 점 입니다.

# 만약 학생의 수가 하나도 없다면 다음과 같이 출력하여야 한다(최고, 최저, 평균 점수를 출력하지 않는다).

# 이번학기 수강 인원은 없습니다.

#

def print_info(all):
    if len(all) == 0:
          return print('최고, 최저, 평균 점수를 출력하지 않는다.')
    print('이번학기 수강 인원은 ' + str(len(all)) + ' 명 입니다.')
    score = []
    sum = 0
    for i in all:
        total = 0
        total = i[1] + i[2] + i[3] + i[4]
        if total > 100 or total < 0:
            return 
        score.append(total)
        sum += total
    big = max(score)
    small = min(score)
    print('최고 점수는 ' + str(big) + ' 점, 최저 점수는 ' + str(small) + '점, 평균 점수는 ' + str(round(sum / len(all), 1)) + ' 점 입니다.')
  

# 학생들의 성적은 다음과 같이 A+ 부터 F 중 하나로 부여된다.
#
# A+ > A0 > B+ > B0 > C+ > C0 > D+ > D0 > F
# 
# 상대평가를 적용하는 프로그래밍기초 수업은 A등급(A+, A0)은 전체 수강 인원 중 최대 30% 에게만 부여할 수 있고, 
# 이어서 B등급(B+, B0)은 A 등급을 포함하여 최대 70% 에게만 부여할 수 있다.
# 하나의 등급 내에서 비율은 담당교수가 임의로 배정이 가능하며 
# (예를 들어 B 등급 내의 모든 학생에게 B+을 줄 수도 있고 반대로 모두 B0를 줄 수도 있다)
# C 등급 이하의 배분 역시 임의로 배정이 가능하다.
# 예를 들어 만약 A등급을 20%로 정했다면, B등급은 최대 50% 까지 부여할 수 있다.
# 다른 예로 A등급을 최대치인 30%의 학생에게 부여한다면, B등급은 최대 40% 까지만 부여가 가능하다.
# 
# 만약 등급별 배분을 A등급 20%, B등급 40%, C등급 40% 로 한다면, 
# 수강 인원이 10명일 경우 등급별 인원 구성은 다음과 같이 될 것이다.
# A등급 : 2명
# B등급 : 4명
# C등급 : 4명
#
##################################################################
# [5점] 문제 3.
##################################################################
# 
# 학생들에게 성적을 부여하기에 앞서, [전체성적자료]를 받아서 다음과 같이 가공하는 함수 transform 을 완성해보자.
# 
# transform 함수의 입력과 출력은 다음과 같다.
# 입력(인자) : 튜플 (<이름>, <출석>, <실습>, <과제>, <시험>) 의 리스트
# 출력(리턴값) : 튜플 (<총점>, <이름>) 의 리스트, 단 총점을 기준삼아 내림차순으로 정렬되어야 함
# 
# 예를 들어
# [('홍길동', 9, 15, 19, 40), ('임꺽정', 3, 3, 3, 33), ('전우치', 6, 14, 13, 40)]
# 의 결과는 
# [(83, '홍길동'), (42, '임꺽정'), (73, '전우치')]
# 가 나와야 한다.
#
# 힌트1 : 튜플의 리스트를 정렬할 때는 튜플의 원소에서 첫째 값을 기준으로 정렬한다.
# 힌트2 : <리스트>.sort() 함수를 호출 할 때, 
#        <리스트>.sort(reverse=True) 와 같이 호출하면 오름차순이 아닌 내림차순으로 정렬된 리스트를 얻을 수 있다.
#

def transform(all):
    member = []
    for i in all:
        total = 0
        total = i[1] + i[2] + i[3] + i[4]
        member.append((total, i[0]))
    member.sort(reverse=True)
    return member

##################################################################
# [45점] 문제 4. (보조문제 4.1 ~ 4.4.로 구성)
##################################################################
# 
# 이제 학생들에게 정해진 비율대로 등급을 부여하는 함수 grading 를 작성해보자.
# grading 함수의 입력과 출력은 다음과 같다.
#
# 입력(인자) : 튜플 (<총점>, <이름>) 의 리스트와 네개의 정수
# 출력(리턴값) : 튜플 (<이름>, <총점>, <등급>) 의 리스트
#
# 1. 입력에서 튜플 (<총점>, <이름>) 의 리스트 data는 transform 의 결과이다.
# 2. a, b, c, d 는 10 이상~60 이하의 정수로, 네 정수의 합은 100보다 같거나 작아야 한다.
#    a 는 A 등급의 배율을 의미한다. 
#    b 는 B 등급의 배율을 의미한다.
#    c 는 C 등급의 배율을 의미한다.
#    d 는 D 등급의 배율을 의미한다.
#    a + b + c + d 의 합이 100보다 작을 경우, 나머지 학생에겐 F 등급을 부여한다.
#    각 등급내에서 +와 0 점수는 동수로 하되, 배정된 학생의 수가 홀수일 경우 0를 더 많이 배분한다.
#    \ 예를 들어 A 등급 학생이 9명일 경우 A+ 은 4명, A0는 5명이된다.
#
# 3. 등급은 문자열 값으로 "A+", "A0", "B+", "B0", "C+", "C0", "D+", "D0", "F" 중 하나가 되어야 한다.
#
# 4. 만약 a + b + c + d 의 합이 100을 넘길 경우, 다음과 같은 메시지를 출력하고 빈 리스트를 리턴하여야 한다.

# 가중치의 합이 100을 넘었습니다.

# 5. 만약 a, b, c, d 의 값 중 하나라도 10 ~ 60 사이의 정수(10이상, 60이하)가 아닐 경우, 
#    아래 메시지를 출력하고 빈 리스트를 리턴하여야 한다.

# 가중치 값이 잘못되었습니다.

##################################################################
# [10점] 문제 4.1.
##################################################################
#
# 먼저 조건 4,5를 검사해주는 check_ratio 함수를 작성해보자.
# 
# 입력(인자) : 네개의 정수
# 출력(리턴값) : 논리값 (True 혹은 False)
#
# 1. a + b + c + d 의 합이 100을 넘길 경우 위에서 명시한 메시지를 출력하고 False 를 리턴한다.
# 2. a, b, c, d 중 어느 하나라도 10의 배수가 아닐 경우, 위에서 명시한 메시지를 출력하고 False를 리턴한다.
# 3. 그렇지 않으면 True를 리턴한다.
# 힌트 : 2번에서 for 문을 응용할 수 있다. (필수는 아님)
# 

def check_ratio(a,b,c,d):
    if a + b + c + d > 100:
        print('가중치의 합이 100을 넘었습니다.')
    elif a < 10 or a > 60 or b < 10 or b > 60 or c < 10 or c > 60 or d < 10 or d > 60:
        print('가중치 값이 잘못되었습니다.')

##################################################################
# [10점] 문제 4.2.
##################################################################
#
# 이제 check_ratio 를 통과한 a, b, c, d 값을 기준으로, 
# 각 등급별 학생의 수를 내어주는 함수 aux1 를 작성하자.
# 
# 입력(인자) : 다섯개의 정수 (<학생수>,a,b,c,d)
# 출력(리턴값) : 튜플 (A,B,C,D,F) - 각 등급에 해당하는 학생 수
#
# 리턴값의 다섯 정수의 합은 입력받은 <학생수>와 같아야 한다.
#

def aux1(num_of_stu, a, b, c, d):
    sum = a + b + c + d
    a = num_of_stu * (a / sum)
    b = num_of_stu * (b / sum)
    c = num_of_stu * (c / sum)
    d = num_of_stu * (d / sum)
    f = num_of_stu - sum
    return (a, b, c, d, e, f)

##################################################################
# [10점] 문제 4.3.
##################################################################
#
# 각 등급 내 학생의 수를 +, 0 로 나눠주는 aux2 함수를 작성해보자.
#
# 입력(인자) : 학생수
# 출력(리턴값) : 튜플 (n+등급학생수, n0등급학생수)
#
# 리턴값의 두 정수의 합은 입력받은 <학생수>와 같아야 한다.
#
# 입력받은 학생수가 짝수일 경우 동수로, 홀수일 경우 0에 한명 더 배분한다.
# 예를 들어 A등급의 학생이 9명이면 A+는 4명, A0는 5명이다.
# 즉, aux2(9) 의 결과는 튜플 (4,5) 이다.
#

def aux2(stu):
    if stu % 2 == 0:
        return (stu // 2, stu // 2)
    else:
        return (stu // 2, stu // 2 + 1)

##################################################################
# [15점] 문제 4.4.
##################################################################
#
# 이제 아래 주어진 코드를 완성하자.
def grading(data, a, b, c, d):
  if not check_ratio(a,b,c,d):  # check_ratio 를 통과하지 못할 경우
    return []                 	# 빈 리스트를 리턴
  else:
    num_of_stu = len(data)    	# 전체 학생 수
    grading_list = []         	# 등급별 학생 수 (초기값 = []) 
    num_of_f = num_of_stu     	# F 학점 학생 수 (초기값 = 전체 학생 수)
    for num_of_grade in aux1(num_of_stu, a, b, c, d): 	# 등급 별 학생 수로 for 문 수행
      grade_plus, grade_zero = aux2(num_of_grade)     	# 한 등급 내 plus, zero 등급 수
      grading_list += [grade_plus, grade_zero]        	# 순차적으로 grading_list 에 더함
      num_of_f -= num_of_grade                        	# F 학점 학생 수 - 이번 등급 학생 수
    grading_list += [num_of_f] 	# 타 등급 학생 수를 빼고 남은 F 학점 학생 수를 더함
    result = []					# 최종 결과를 저장할 리스트 (초기값 = [])
    # 아래 세 변수 grade_table, grade_index, data_index 는 각자의 구현에 따라 사용하지 않아도 됨
    grade_table = ["A+", "A0", "B+", "B0", "C+", "C0", "D+", "D0", "F"]
    grade_index = 0
    data_index = 0
    #
    #  result 에 완성된 리스트가 채워지도록 이후 코드를 완성하시오.
    ##
    for i in data:
      result += data
    result.append(grading_list)
    print(result)
    return result				# 최종 결과 리스트를 리턴

# 
# (학사 시스템에서) 학생들에게 부여하는 등급 별 점수 분포는 아래와 같다.
# 
# A+  95점 이상
# A0  90점 이상 ~ 95점 미만
# B+  85점 이상 ~ 90점 미만
# B0  80점 이상 ~ 85점 미만
# C+  75점 이상 ~ 80점 미만
# C0  70점 이상 ~ 75점 미만
# D+  65점 이상 ~ 70점 미만
# D0  60점 이상 ~ 65점 미만
# F   60점 미만
#
# 학생들이 얻은 [원점수](총점)에 맞춰 그대로 등급을 부여하면 담당교수가 정한 등급 비율이 무색해진다.
# 그래서 학사 시스템에는 학생들을 성적 순으로 정렬(transform)한 다음, 
# 미리 정한 등급에 맞춰 [원점수] 대신 [환산점수]를 부여해서 입력한다.
#
# 각 등급 별로 부여할 [환산점수]는 다음과 같다.
#
# A+  99
# A0  94
# B+  89
# B0  84
# C+  79
# C0  74
# D+  69
# D0  64
# F   59
#
##################################################################
# [5점] 문제 5.
##################################################################
#
# grading 의 결과를 받아 [환산점수]를 포함한 리스트를 내어주는 normalizing 함수를 완성하시오.
#
# 입력(인자) : 튜플 (<이름>, <총점>, <등급>) 의 리스트
# 출력(리턴값) : 튜플 (<이름>, <총점>, <환산점수>, <등급>) 의 리스트
# 
# 입력 값에서 등급은 항상 "A+", "A0", "B+", "B0", "C+", "C0", "D+", "D0", "F" 중 하나라고 가정한다.
#

def normalizing(grade_data):
  normalized = []
  for i in grade_data[:-1]:
      grade_data[i] = 
  ##
  #  normalized 에 완성된 리스트가 채워지도록 이후 코드를 완성하시오.
  ##
  return normalized

##########################################################################################
#
# test_all 함수를 실행하여 원하는 대로 출력이 나오는지 확인해보자.
# 
##########################################################################################

# 아래 samples 데이터는 무작위로 값을 생성한 데이터입니다.
# samples = []
samples = [
  ("가후", 10, 19, 0, 50),
  ("강유", 9, 1, 10, 34),
  ("곽가", 7, 1, 17, 20),
  # ("관우", 8, 1, 20, 4),
  # ("노숙", 5, 17, 2, 1),
  # ("대교", 10, 20, 8, 39),
  # ("등애", 10, 18, 4, 50),
  # ("마량", 6, 19, 14, 13),
  # ("마초", 9, 15, 13, 9),
  # ("방통", 9, 13, 18, 5),
  # ("법정", 6, 1, 13, 28),
  # ("사마의", 9, 20, 7, 46),
  # ("서서", 4, 12, 8, 13),
  # ("소교", 4, 11, 12, 2),
  # ("손견", 4, 9, 20, 40),
  # ("손권", 5, 20, 9, 47),
  # ("손상향", 10, 13, 12, 10),
  # ("손책", 6, 6, 1, 42),
  # ("순욱", 9, 1, 17, 11),
  # ("순유", 8, 1, 0, 47),
  # ("신헌영", 7, 8, 15, 45),
  # ("여몽", 4, 0, 18, 38),
  # ("여포", 7, 15, 14, 36),
  # ("유비", 9, 19, 5, 23),
  # ("육손", 6, 11, 12, 42),
  # ("이유", 9, 20, 17, 6),
  # ("장각", 5, 11, 4, 45),
  # ("장굉", 10, 13, 5, 27),
  # ("장비", 9, 15, 17, 26),
  # ("장소", 8, 12, 3, 27),
  # ("저수", 4, 7, 18, 39),
  # ("전위", 4, 17, 11, 37),
  # ("전풍", 4, 17, 7, 37),
  # ("정욱", 6, 5, 16, 48),
  # ("제갈량", 4, 15, 18, 49),
  # ("조비", 8, 5, 8, 27),
  # ("조운", 8, 0, 1, 13),
  # ("조조", 5, 20, 14, 45),
  # ("종회", 7, 12, 15, 30),
  # ("주유", 5, 3, 2, 30),
  # ("진군", 8, 8, 8, 6),
  # ("채염", 6, 8, 9, 0),
  # ("채옹", 6, 5, 11, 18),
  # ("초선", 8, 1, 7, 44),
  # ("축융", 4, 8, 2, 46),
  # ("하후돈", 5, 11, 14, 45),
  # ("하후연", 5, 10, 5, 2),
  # ("허저", 5, 10, 14, 47),
  # ("황월영", 8, 12, 19, 35),
  # ("황충", 9, 10, 1, 40),
]

print_all(samples)
print_info(samples)
transform(samples)

def test_all():
  print_info(samples)
  transformed = transform(samples)
  # transformed 는 (총점, 이름) 튜플 형태의 데이터다.
  graded = grading(transformed, 20, 30, 30, 10)
  normalized = normalizing(graded)
  grade_code = ""
  for (score, name, _, grade) in normalized:
    if grade_code != grade:
      grade_code = grade
      print("\n", grade, " : ", sep="",end="")
    print(name, "(", score, "),", sep="", end="")

## 출력 결과는 아래와 같다.
# >>> test_all()
# 이번학기 수강 인원은 50 명입니다.
# 최고 점수는 86 점, 최저 점수는 22 점, 평균 점수는 56.92 점 입니다.

# A+ : 제갈량(86),조조(84),사마의(82),등애(82),손권(81),
# A0 : 가후(79),대교(77),허저(76),하후돈(75),정욱(75),
# B+ : 신헌영(75),황월영(74),손견(73),여포(72),육손(71),전위(69),저수(68),
# B0 : 장비(67),전풍(65),장각(65),종회(64),황충(60),축융(60),초선(60),여몽(60),
# C+ : 유비(56),순유(56),장굉(55),손책(55),강유(54),이유(52),마량(52),
# C0 : 장소(50),조비(48),법정(48),마초(46),손상향(45),방통(45),곽가(45),채옹(40),
# D+ : 주유(40),순욱(38),
# D0 : 서서(37),관우(33),진군(30),
# F : 소교(29),노숙(25),채염(23),하후연(22),조운(22),
#